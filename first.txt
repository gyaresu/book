No network, no joy. Great holiday. Sigh.

Zach was just grinding out the sarcasm from within the safe harbour of his mind. 

On a boat. Headed to Naxos. Sigh. 

This holiday was supposed to be a perk. So far it had been disconnection, loss and longing fed into the machinations of contemporary international transport.

Meat grinder package holiday of doom. Except that it wasn't. Not really. A couple of flights and a few airports with some train action in between had led to Pireus and then from that port back to a hotel while waiting an extra day due to the ferry crew strike.

Sigh.

No pressure. No, really. Zach was supposed to be pressure-less. Doctors orders. Which is an unfortunate expression these days. As if doctors were in any position to give orders any more. Doctors. Another victim of the great knowledge flattening. The distribution and access of the entity now known as the interwebs leaves no edifice uncrumbled.
Pill pushers... now ain't that the truth. Zack's doctor had relieved his pills of duty though. No more oxy, no more adhd glories. Even the percs he'd take with morning espresso had been left behind. For all of Zack's self indulgent egomaniacal mental posturing even he had to admit that there are still some in the world who know a whole lot more than can be presented in any online format. Begrudgingly he respected and trusted Dr. Barnes.
Doc Barnes had been the first glimmer in the darkness after a litany of disinterested prescription monkeys. The first to verbalise how completly full of himself Zack really was. That was pretty much the first test for Zack. Relinquishing the power of self diagnosis is hard. He respected the doc. Not that he liked what the doc had to say. In fact the doc was downright blunt when it came to his assessment of the viability of Zach's mortal vessel. Zach's mortal vessel was not long for this world. This was not entirely unexpected news to Zach.

The first meet with the doc had been about three months ago. In that time he'd gone through some detox and some downtime. Just not enough. Hence the islands. The idea (although his own) was triggered by an end of contract and the payment that should follow. Except that it didn't.

Assholes. Zack somewhat understood his clients misconceptions when faced with their abrogation of responsibility though. It must be hard for them, not believing in his ability to enforce consequences. It just wasn't fun any more. Now it hadn't always been easy to collect on terms but it had been more than a decade since his contracts were small enough to let slide. These days he only worked a couple of contracts per year. And these days, everybody paid. Except, they didn't. Sigh.

With the ferry still underway and another couple of hours to kill Zack needed to get out of his head. His head was the last place he needed to be and with no direct access to the net he decided to find mischief within his vicinity. So out comes the deck. Thin and black. No stickers, no bling, no brand, no head-turning conspicuousness of any kind. It wasn't ugly and it wasn't huge. It wasn't mono-piece brushed aluminium either. It was just a deck. Only it
wasn't.

Zach could barely respond if ever asked 'what kind of laptop is that?'. This was no laptop. A huge fan of a certain table top roleplaying game while growing up, Zach could only ever concieve of the world going one direction. In that world he was going to be a decker and every decker needed a cyberdeck. Zach's 'laptop' was actually a fairly common set of components thanks to the wonders of mass production yet it is doubtfull these parts had every been assembled in quite the same way. The case was moulded from carbon nanotubes (black dust ordered online basically) blended with a high-strength flexible polymer from a JPL recipe (Who doesn't love NASA's robot geeks?). Ridiculously strong yet flexible and incredibly light. Almost pointless really because of the relatively soft electrical innards but it gave him such joy. Unlike the gaffer tape. Always with the gaffer tape. He'd relinquished hope of casting functional covers for the sides of his deck. He just never found a way to cleverly integrate them so they wouldn't just get in the damn way when any of the ports were being used. Which is understandable once you've taken note of how many little metalic holes are to be found around the edge of the deck. Maybe the next itteration, maybe a flash of brilliance will come with the faintest of insight into a more classy form of camoflage. Until then. The gaff abides.

11 ports. Outlets. Sockets. Traps. 11 ports is what the gaff covers. Lots and lots of little sticky ports. They are the external clue to the uniqueness of this otherwise mundane seeming device. Mundane computers have a 'brain'. It's the Central Processing Unit that 'runs' programmes. One CPU by itself does time-sharing. Each programme getting some necessary calculation done and then told once more to wait its turn. Barely does this time-sharing become apparent to humans because it's happening millions of times per second in series, one after the other. So even the benefits of a Quad Core CPU are wasted on any but the most advanced users or the laziest programmes. But one of the problems with CPU's is being a victim of its own success. All that raw single threaded processing power generates a lot of heat and is by and large an impressive yet unnecessary feature in a world of content consumers. Which is why this deck has 4 Graphical Processing Units and two quad core CPU's.

GPU's were designed for parallelism. Handy when you want to generate the millions of polygons required thirty times every second while fragging monsters in _generic_shootemup_. GPU's and their thousands of cores are more suited to running the kinds of small but simultaneous calculations that would otherwise have taxed the CPU for an exponentially longer time. GPU's don't have to be power houses. GPU's just need to do simple things like compare two strings of characters. It's just that they need to do as many of them as possible per second and right now they need to do them to "Dave's phone".

Dave and his phone are understandably rather than blissfully unaware of any of the subsequent ramifications around Dave's phone broadcasting itself via the built-in Bluetooth wireless tranciever. Dave's phone should be more careful. But they never are. Silly phone.

Bluetooth is a really handy way of connecting two devices wirelessly without needing a router or any other infrastructure. Or at least it should be. What it ends up being is a necessary frustration when you want to use a handsfree headset with your phone. Pairing is tedious. 

Pairing is a really good way of stopping random strangers using your phone or gadgets. What it's not good at is arguing. Two of the bluetooth radio devices built into Zach's deck were arguing with Dave's phone right now. And they were winning the argument. Mainly through subverting the argument before it could even take place. As with all technology the relatively simple act of getting a headset and a phone to trust each other was actually built on literaly dozens of different programmes and protocols working together. All of them written by humans and all of them succeptible to some instruction or number or otherwise batshit crazy missuse of them as a piece of technology.

People like Zach who can write a computer programme or understand sets of rules called protocols use the term 'bug'. It's part of the lexicon. Bugs are normal. Bugs are in all programmes larger than "20 goto 10". Bugs are normal. 

## Bugs are so normal that even the best software in the world has them. That software autonomously flies all the spacecraft though and everyone knows rocket science is easy.

But what is a bug? And why can't you just squash them? Well let's take as an example one of the parts of the bluetooth 'stack' of technologies that enables "Daves's Phone" to link securely to a presumably dorky looking headset attached to someone who may or may not be know as 'Dave'. And let's pose for the sake of example that this peice of technology is called the Logical Link Control and Adaptation Protocol (L2CAP) and that this particular chunk of magic is tasked with segmentation and reassembly of on-air packets. And let's also say that this particular protocol expected a specific set of information in a specific format. Say for example a request packet that was a particular size and with a particular set of parameters. Now lets say that one of those parameters was something as simple as a 'yes' or a 'no'. In computer speak maybe using a 1 meaning yes or a 0 meaning no. That programme may have been coded to write down that 0 or 1 in a variable called something like 'authenticated_true' and that variable would detirmine whether 'Dave's Phone' had been paired successfully. In a perfect world that would be the end of the story but maybe that programme was written by two guys left alone in a small department of a large device manufacturer. Maybe the guys only had six weeks to work on that part of the stack and maybe their programme passed all checks for conforming with the rules of the L2CAP.

And maybe that authenticated_true variable should have been set with a type Boolean instead of being an Unsigned Integer...

One sets variables with a 'type' so that they don't get abused.  Nobody wants their accounting app to end up with a Total of "Cheeseburger!". And variables that are just yes/no are perfectly served by Boolean True or False. But authenticated_true was set as an integer. But not just any integer. A short integer. With no bounds checking...

So now while "Dave's" phone was expecting a yes or no answer it would unfortunately accept numbers other than 0 or 1. In fact, not only would it accept other numbers, it would'nt check to see if the number was redonkulously massive. So that's what Zach's deck did. It incrementally sent worse and worse numbers and checked the response from the phone. Until finally the number was the perfect fit for the whole space that it could fill. So the eventual effect was much like winding an odometre all the way around back to all zeros... plus 1.

Now that the variable authenticated_true was set to 1 it would talk to the deck. And that part of the hack is so mundane as to be boring. Zach had some custom scripts tying together a bunch of programmes that sorted and categorised data. The entire process took between a few seconds and a few minutes, depending on the size of the files. The scripts were really just a series of 'if this then that' running through hundreds of known phones and their configurations. The scipt would figure out which Operating System "Dave's phone" was using by testing the contents and existance of files like '/etc/version' and the output of `uname -a`. All these tests would trigger other scripts for sucking files, sms, call data and contact lists out of "Dave's phone". This data would be then be automatically submitted into Dradis, a type of Open Source penetration testing framework. You can think of Dradis as a project management tool for hackers.

There was another set of scripts that were included at the top of all Zach's scripts that recorded the hack's metadata. Basically it stored information about the hacking process itself. GPS co-ords, CPU runtime, memstat, iostat, threads, counts and much much more. Zach would tell himself this data was invaluable for improvement of the process and in truth it was but he maintained enough self-aware enough to acknowledge the gushing squeel of joy that washed over him by manipulating this data utilizing the R statistical language environment and framework. Basically Zack got '10 year old on Christmas morning' happy by generating pretty, shiny, joyous, wonderful GRAPHS!

Integers are just numbers and lots of bugs are easy to catch and it's really only with real world testing that you'll find out all the cruel and misguided ways people can treat your software. and depending on the language there are a few different types that may be chosen. In the case of our yes or no example our human could have gone with a 'string' variable but that would be silly. Strings are for variables like smells_are which would let a user respond with things like "Yummy!" or "−32768 to +32767
